/**
 * ************************************************************************
 * @filename: test_seqqueue.cpp
 *
 * @brief : 测试循环顺序队列
 *
 *
 * @author : baiyebzx (baiyebzx1228@gmail.com)
 * @date : 2024-08-27
 *
 * ************************************************************************
 */

#include "seqqueue.h"
#include <iomanip>
#include <iostream>

using std::cin;
using std::cout;
using std::setw;

bu_tools::SeqQueue<int> Q;

/////////////////////////////////////////////////////////////////////////////////////////////////////
/*

辅助函数的声明

*/
/////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * *****************************************************************
 * @brief : 主菜单
 * *****************************************************************
 */
void Menu01();

/**
 * *****************************************************************
 * @brief : 初始化随机数种子
 * *****************************************************************
 */
void InitRandomSeed() {
  srand(static_cast<unsigned>(time(0)));
}

/**
 * *****************************************************************
 * @brief : 生成0到99之间的随机数
 * @return int
 * *****************************************************************
 */
int GenerateRandomNumber() {
  return rand() % 100;
}

/**
 * *****************************************************************
 * @brief : 打印整个队列（整型）
 * @param  q
 * *****************************************************************
 */
void ShowSeqQueue(const bu_tools::SeqQueue<int> &q);

/**
 * *****************************************************************
 * @brief : 随机生成指定个数的队列
 * @param  len
 * @param  q
 * *****************************************************************
 */
void InitSeqQueue(const int len, bu_tools::SeqQueue<int> &q);

/////////////////////////////////////////////////////////////////////////////////////////////////////
/*

主函数

*/
/////////////////////////////////////////////////////////////////////////////////////////////////////
int main(int argc, const char *argv[]) {

  //主菜单操作标号
  int menu01_select = 0;
  //单个操作是否再次执行标号
  char is_continue;

  //随机生成一个循环顺序队列
  InitRandomSeed();
  InitSeqQueue(10, Q);

  /*****************************************************************

  主循环

  *****************************************************************/
  while (true) {

    //主菜单
    Menu01();
    //展示当前循环顺序队列
    ShowSeqQueue(Q);

    cout << "\n请选择你要操作的代码<1-11>：";
    cin >> menu01_select;

    if (menu01_select == 1) {
      /*****************************************************************

      1.进队列（在循环顺序队列队尾插入元素）

      *****************************************************************/

      //整个操作的循环
      while (true) {

        // 清空终端屏幕
        cout << "\033[2J\033[1;1H";
        ShowSeqQueue(Q);

        int e;
        cout << "\n请输入你要插入的元素：";
        cin >> e;

        if (Q.EnQueue(e)) {
          cout << "\n入队列后。。。。\n";
          ShowSeqQueue(Q);
        } else {
          cout << "\n队列已满，无法再次入队列！！！\n";
        }

        //是否再次进行该操作
        cout << "\n还继续吗？<Y.继续   N.结束>:";
        cin >> is_continue;
        if (is_continue == 'Y' || is_continue == 'y') {
          continue;
        } else {
          break;
        }
      }

    } else if (menu01_select == 2) {
      /*****************************************************************

      2.出队列（删除循环顺序队列队头元素）

      *****************************************************************/
      //整个操作的循环
      while (true) {

        // 清空终端屏幕
        cout << "\033[2J\033[1;1H";
        ShowSeqQueue(Q);

        int e;
        Q.DeQueue(e);

        cout << "\n删除队头元素" << e << "后。。。。\n";
        ShowSeqQueue(Q);

        //是否再次进行该操作
        cout << "\n还继续吗？<Y.继续   N.结束>:";
        cin >> is_continue;
        if (is_continue == 'Y' || is_continue == 'y') {
          continue;
        } else {
          break;
        }
      }

    } else if (menu01_select == 3) {
      /*****************************************************************

      3.读循环顺序队列队头的元素到e

      *****************************************************************/
      //整个操作的循环
      while (true) {

        // 清空终端屏幕
        cout << "\033[2J\033[1;1H";
        ShowSeqQueue(Q);

        int e;

        if (Q.GetFront(e)) {
          cout << "\n队头元素为：" << e << "\n";
          ShowSeqQueue(Q);
        } else {
          cout << "\n队列为空，读取错误！！！\n";
        }

        //是否再次进行该操作
        cout << "\n还继续吗？<Y.继续   N.结束>:";
        cin >> is_continue;
        if (is_continue == 'Y' || is_continue == 'y') {
          continue;
        } else {
          break;
        }
      }
    } else if (menu01_select == 4) {
      /*****************************************************************

      4.判断循环顺序队列是否为空

      *****************************************************************/
      //整个操作的循环
      while (true) {

        // 清空终端屏幕
        cout << "\033[2J\033[1;1H";
        ShowSeqQueue(Q);

        if (Q.IsEmpty()) {
          cout << "\n队列为空！！！\n";
        } else {
          cout << "\n队列不为空！！！\n";
        }

        //是否再次进行该操作
        cout << "\n还继续吗？<Y.继续   N.结束>:";
        cin >> is_continue;
        if (is_continue == 'Y' || is_continue == 'y') {
          continue;
        } else {
          break;
        }
      }
    } else if (menu01_select == 5) {
      /*****************************************************************

      5.判断循环队列是否满

      *****************************************************************/
      //整个操作的循环
      while (true) {

        // 清空终端屏幕
        cout << "\033[2J\033[1;1H";
        ShowSeqQueue(Q);

        if (Q.IsFull()) {
          cout << "\n队列已满！！！\n";
        } else {
          cout << "\n队列未满！！！\n";
        }

        //是否再次进行该操作
        cout << "\n还继续吗？<Y.继续   N.结束>:";
        cin >> is_continue;
        if (is_continue == 'Y' || is_continue == 'y') {
          continue;
        } else {
          break;
        }
      }
    } else if (menu01_select == 6) {
      /*****************************************************************

      6.求循环顺序队列中元素的个数

      *****************************************************************/
      //整个操作的循环
      while (true) {

        // 清空终端屏幕
        cout << "\033[2J\033[1;1H";
        ShowSeqQueue(Q);

        cout << "\n队列中元素的个数为：" << Q.GetLength() << "\n";

        //是否再次进行该操作
        cout << "\n还继续吗？<Y.继续   N.结束>:";
        cin >> is_continue;
        if (is_continue == 'Y' || is_continue == 'y') {
          continue;
        } else {
          break;
        }
      }
    } else if (menu01_select == 7) {
      /*****************************************************************

      7.把一个循环顺序队列赋值给另一个循环顺序队列

      *****************************************************************/
      //整个操作的循环
      while (true) {

        // 清空终端屏幕
        cout << "\033[2J\033[1;1H";
        ShowSeqQueue(Q);

        bu_tools::SeqQueue<int> other_Q;
        InitSeqQueue(7, other_Q);

        cout << "\n另一个循环顺序队列如下：\n";
        ShowSeqQueue(other_Q);

        Q = other_Q;
        cout << "\n另一个循环顺序队列赋值给当前顺序队列如下：\n";
        ShowSeqQueue(Q);

        //是否再次进行该操作
        cout << "\n还继续吗？<Y.继续   N.结束>:";
        cin >> is_continue;
        if (is_continue == 'Y' || is_continue == 'y') {
          continue;
        } else {
          break;
        }
      }
    } else if (menu01_select == 8) {
      /*****************************************************************

      8.把循环顺序队列置空

      *****************************************************************/
      //整个操作的循环
      while (true) {

        // 清空终端屏幕
        cout << "\033[2J\033[1;1H";
        ShowSeqQueue(Q);

        Q.Clear();
        cout << "\n置空后。。。。\n";

        ShowSeqQueue(Q);

        //是否再次进行该操作
        cout << "\n还继续吗？<Y.继续   N.结束>:";
        cin >> is_continue;
        if (is_continue == 'Y' || is_continue == 'y') {
          continue;
        } else {
          break;
        }
      }

    } else if (menu01_select == 9) {
      /*****************************************************************

      9.随机生成循环顺序队列

      *****************************************************************/
      //整个操作的循环
      while (true) {

        // 清空终端屏幕
        cout << "\033[2J\033[1;1H";
        ShowSeqQueue(Q);

        InitSeqQueue(7,Q);

        cout<<"\n随机生成循环顺序队列如下：\n";
        ShowSeqQueue(Q);

        //是否再次进行该操作
        cout << "\n还继续吗？<Y.继续   N.结束>:";
        cin >> is_continue;
        if (is_continue == 'Y' || is_continue == 'y') {
          continue;
        } else {
          break;
        }
      }

    } else if(menu01_select==10){
      /*****************************************************************

      10.用已有的循环顺序队列初始化另一个新循环顺序队列

      *****************************************************************/
      //整个操作的循环
      while (true) {

        // 清空终端屏幕
        cout << "\033[2J\033[1;1H";
        ShowSeqQueue(Q);

        bu_tools::SeqQueue<int> other_Q(Q);

        cout<<"\n用当前循环顺序队列初始化另一个循环顺序队列如下：\n";
        ShowSeqQueue(other_Q);

        //是否再次进行该操作
        cout << "\n还继续吗？<Y.继续   N.结束>:";
        cin >> is_continue;
        if (is_continue == 'Y' || is_continue == 'y') {
          continue;
        } else {
          break;
        }
      }
    }else if(menu01_select==11){
      /*****************************************************************

      11.运动会比赛安排（循环顺序队列的应用）

      *****************************************************************/
    }
    else {
      break;
    }

    // 清空终端屏幕
    cout << "\033[2J\033[1;1H";
  }

  return 0;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
/*

辅助函数的定义

*/
/////////////////////////////////////////////////////////////////////////////////////////////////////

void Menu01() {
  cout << "********** 测 试 循 环 顺 序 队 列 操 作 **********\n";
  cout << "      1.进队列（在循环顺序队列队尾插入元素）\n";
  cout << "      2.出队列（删除循环顺序队列队头元素）\n";
  cout << "      3.读循环顺序队列队头的元素到e\n";
  cout << "      4.判断循环顺序队列是否为空\n";
  cout << "      5.判断循环队列是否满\n";
  cout << "      6.求循环顺序队列中元素的个数\n";
  cout << "      7.把一个循环顺序队列赋值给另一个循环顺序队列\n";
  cout << "      8.把循环顺序队列置空\n";
  cout << "      9.随机生成循环顺序队列\n";
  cout << "     10.用已有的循环顺序队列初始化另一个新循环顺序队列\n";
  cout << "     11.运动会比赛安排（循环顺序队列的应用）\n";
  cout << "     其他.结束\n";
  cout << "**************************************************\n";
}

void ShowSeqQueue(const bu_tools::SeqQueue<int> &q) {

  if (q.IsEmpty()) {
    cout << "\n队列为空！！！\n";
    return;
  }

  cout << "\n循环顺序队列如下：\n";

  int len = q.GetLength();

  //打印上部分标号
  for (int i = 1; i <= len; ++i) {
    cout << "[" << setw(5) << i << "] ";
  }

  cout << "\n";

  //打印队列中的信息
  for (auto it = q.begin(); it != q.end(); ++it) {
    cout << setw(5) << *it << "   ";
  }
  cout << "\n";

  cout << "   ^";
  for (int i = 0; i < len - 1; ++i) {
    cout << "        ";
  }
  cout << "   ^\n";

  cout << "   |";
  for (int i = 0; i < len - 1; ++i) {
    cout << "        ";
  }
  cout << "   |\n";

  cout << " front";
  for (int i = 0; i < len - 1; ++i) {
    cout << "        ";
  }
  cout << "rear\n";
}

void InitSeqQueue(const int len, bu_tools::SeqQueue<int> &q) {
  if (len <= 0) {
    return;
  }

  if (!q.IsEmpty()) {
    q.Clear();
  }

  for (int i = 0; i < len; ++i) {
    q.EnQueue(GenerateRandomNumber());
  }
}
