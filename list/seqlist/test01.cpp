/**
 * ************************************************************************
 * @filename: test01.cpp
 *
 * @brief : 测试顺序表
 *
 *
 * @author : baiyebzx (baiyebzx1228@gmail.com)
 * @date : 2024-08-04
 *
 * ************************************************************************
 */

#include "myseqlist.h"
#include <cstdlib>
#include <ctime>
#include <iostream>

using std::cout;
// using std::cin;

bu_tools::MySeqList L;

/**
 * *****************************************************************
 * @brief : 初始化随机数种子
 * *****************************************************************
 */
void initializeRandomSeed() {
  srand(static_cast<unsigned>(time(0)));
}

/**
 * *****************************************************************
 * @brief : 生成0到99之间的随机数
 * @return int
 * *****************************************************************
 */
int generateRandomNumber() {
  return rand() % 100;
}

/****************************************************************************************************

主函数

****************************************************************************************************/

int main(int argc, const char *argv[]) {

  //随机生成一个15长度的顺序表
  initializeRandomSeed();
  for (int i = 0; i < 15; ++i) {
    L.append(generateRandomNumber());
  }

  cout << "当前顺序表：\n";
  L.show();

  /****************************************************************************************************

  删除元素

  ****************************************************************************************************/
  cout << "\n\n1.删除第4个元素....\n";
  int temp;
  L.delete_elem(4, temp);
  cout << "删除的元素值为：" << temp << "\n";

  cout << "\n删除后的顺序表：\n";
  L.show();

  /****************************************************************************************************

  顺序表是否为空

  ****************************************************************************************************/
  cout << "\n2.判断顺序表是否为空....\n";
  if (L.is_empty()) {
    cout << "顺序表为空！！！！\n";
  } else {
    cout << "顺序表非空！！！！\n";
  }

  /****************************************************************************************************

  顺序表中元素个数

  ****************************************************************************************************/
  cout << "\n3.顺序表中元素个数....\n";
  cout << "当前顺序表中个数：" << L.get_length() << "\n";

  /****************************************************************************************************

  取第i个元素

  ****************************************************************************************************/
  cout << "\n4.取第4个元素....\n";
  L.get_elem(4, temp);
  cout << "元素值：" << temp << "\n";

  /****************************************************************************************************

  找到第i个满足compare（）关系的序号

  ****************************************************************************************************/
  cout << "\n5.找到第i个满足compare（）关系的序号....\n";
  int index = L.locate_elem(20, bu_tools::equal);
  if (index == 0) {
    cout << "没有元素是20！！！！";
  } else {
    cout << "元素是20的序号是：" << index << "\n";
  }

  return 0;
}